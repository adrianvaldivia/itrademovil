package com.itrade.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.itrade.model.Prospecto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROSPECTO.
*/
public class ProspectoDao extends AbstractDao<Prospecto, Long> {

    public static final String TABLENAME = "PROSPECTO";

    /**
     * Properties of entity Prospecto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPersona = new Property(1, Integer.class, "IdPersona", false, "ID_PERSONA");
        public final static Property IdProspecto = new Property(2, Integer.class, "IdProspecto", false, "ID_PROSPECTO");
        public final static Property Razon_Social = new Property(3, String.class, "Razon_Social", false, "RAZON__SOCIAL");
        public final static Property RUC = new Property(4, String.class, "RUC", false, "RUC");
        public final static Property Latitud = new Property(5, Double.class, "Latitud", false, "LATITUD");
        public final static Property Longitud = new Property(6, Double.class, "Longitud", false, "LONGITUD");
        public final static Property Direccion = new Property(7, String.class, "Direccion", false, "DIRECCION");
        public final static Property IdCobrador = new Property(8, Integer.class, "IdCobrador", false, "ID_COBRADOR");
        public final static Property IdUsuario = new Property(9, Integer.class, "IdUsuario", false, "ID_USUARIO");
        public final static Property Activo = new Property(10, String.class, "Activo", false, "ACTIVO");
    };


    public ProspectoDao(DaoConfig config) {
        super(config);
    }
    
    public ProspectoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROSPECTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_PERSONA' INTEGER," + // 1: IdPersona
                "'ID_PROSPECTO' INTEGER," + // 2: IdProspecto
                "'RAZON__SOCIAL' TEXT NOT NULL ," + // 3: Razon_Social
                "'RUC' TEXT," + // 4: RUC
                "'LATITUD' REAL," + // 5: Latitud
                "'LONGITUD' REAL," + // 6: Longitud
                "'DIRECCION' TEXT," + // 7: Direccion
                "'ID_COBRADOR' INTEGER," + // 8: IdCobrador
                "'ID_USUARIO' INTEGER," + // 9: IdUsuario
                "'ACTIVO' TEXT);"); // 10: Activo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROSPECTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Prospecto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer IdPersona = entity.getIdPersona();
        if (IdPersona != null) {
            stmt.bindLong(2, IdPersona);
        }
 
        Integer IdProspecto = entity.getIdProspecto();
        if (IdProspecto != null) {
            stmt.bindLong(3, IdProspecto);
        }
        stmt.bindString(4, entity.getRazon_Social());
 
        String RUC = entity.getRUC();
        if (RUC != null) {
            stmt.bindString(5, RUC);
        }
 
        Double Latitud = entity.getLatitud();
        if (Latitud != null) {
            stmt.bindDouble(6, Latitud);
        }
 
        Double Longitud = entity.getLongitud();
        if (Longitud != null) {
            stmt.bindDouble(7, Longitud);
        }
 
        String Direccion = entity.getDireccion();
        if (Direccion != null) {
            stmt.bindString(8, Direccion);
        }
 
        Integer IdCobrador = entity.getIdCobrador();
        if (IdCobrador != null) {
            stmt.bindLong(9, IdCobrador);
        }
 
        Integer IdUsuario = entity.getIdUsuario();
        if (IdUsuario != null) {
            stmt.bindLong(10, IdUsuario);
        }
 
        String Activo = entity.getActivo();
        if (Activo != null) {
            stmt.bindString(11, Activo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Prospecto readEntity(Cursor cursor, int offset) {
        Prospecto entity = new Prospecto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // IdPersona
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // IdProspecto
            cursor.getString(offset + 3), // Razon_Social
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RUC
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Latitud
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // Longitud
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Direccion
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IdCobrador
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // IdUsuario
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // Activo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Prospecto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPersona(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdProspecto(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRazon_Social(cursor.getString(offset + 3));
        entity.setRUC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLongitud(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setDireccion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdCobrador(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIdUsuario(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setActivo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Prospecto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Prospecto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
