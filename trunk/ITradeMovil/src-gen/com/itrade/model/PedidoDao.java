package com.itrade.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.itrade.model.Pedido;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PEDIDO.
*/
public class PedidoDao extends AbstractDao<Pedido, Long> {

    public static final String TABLENAME = "PEDIDO";

    /**
     * Properties of entity Pedido.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdCliente = new Property(1, Integer.class, "IdCliente", false, "ID_CLIENTE");
        public final static Property IdEstadoPedido = new Property(2, Integer.class, "IdEstadoPedido", false, "ID_ESTADO_PEDIDO");
        public final static Property CheckIn = new Property(3, Integer.class, "CheckIn", false, "CHECK_IN");
        public final static Property FechaPedido = new Property(4, java.util.Date.class, "FechaPedido", false, "FECHA_PEDIDO");
        public final static Property FechaCobranza = new Property(5, java.util.Date.class, "FechaCobranza", false, "FECHA_COBRANZA");
        public final static Property MontoSinIGV = new Property(6, Double.class, "MontoSinIGV", false, "MONTO_SIN_IGV");
        public final static Property IGV = new Property(7, Double.class, "IGV", false, "IGV");
        public final static Property MontoTotal = new Property(8, Double.class, "MontoTotal", false, "MONTO_TOTAL");
    };


    public PedidoDao(DaoConfig config) {
        super(config);
    }
    
    public PedidoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PEDIDO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_CLIENTE' INTEGER," + // 1: IdCliente
                "'ID_ESTADO_PEDIDO' INTEGER," + // 2: IdEstadoPedido
                "'CHECK_IN' INTEGER," + // 3: CheckIn
                "'FECHA_PEDIDO' INTEGER," + // 4: FechaPedido
                "'FECHA_COBRANZA' INTEGER," + // 5: FechaCobranza
                "'MONTO_SIN_IGV' REAL," + // 6: MontoSinIGV
                "'IGV' REAL," + // 7: IGV
                "'MONTO_TOTAL' REAL);"); // 8: MontoTotal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PEDIDO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pedido entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer IdCliente = entity.getIdCliente();
        if (IdCliente != null) {
            stmt.bindLong(2, IdCliente);
        }
 
        Integer IdEstadoPedido = entity.getIdEstadoPedido();
        if (IdEstadoPedido != null) {
            stmt.bindLong(3, IdEstadoPedido);
        }
 
        Integer CheckIn = entity.getCheckIn();
        if (CheckIn != null) {
            stmt.bindLong(4, CheckIn);
        }
 
        java.util.Date FechaPedido = entity.getFechaPedido();
        if (FechaPedido != null) {
            stmt.bindLong(5, FechaPedido.getTime());
        }
 
        java.util.Date FechaCobranza = entity.getFechaCobranza();
        if (FechaCobranza != null) {
            stmt.bindLong(6, FechaCobranza.getTime());
        }
 
        Double MontoSinIGV = entity.getMontoSinIGV();
        if (MontoSinIGV != null) {
            stmt.bindDouble(7, MontoSinIGV);
        }
 
        Double IGV = entity.getIGV();
        if (IGV != null) {
            stmt.bindDouble(8, IGV);
        }
 
        Double MontoTotal = entity.getMontoTotal();
        if (MontoTotal != null) {
            stmt.bindDouble(9, MontoTotal);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pedido readEntity(Cursor cursor, int offset) {
        Pedido entity = new Pedido( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // IdCliente
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // IdEstadoPedido
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // CheckIn
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // FechaPedido
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // FechaCobranza
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // MontoSinIGV
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // IGV
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // MontoTotal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pedido entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdCliente(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdEstadoPedido(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCheckIn(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFechaPedido(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFechaCobranza(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMontoSinIGV(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setIGV(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMontoTotal(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Pedido entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Pedido entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
