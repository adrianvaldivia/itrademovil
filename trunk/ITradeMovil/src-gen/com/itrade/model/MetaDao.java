package com.itrade.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.itrade.model.Meta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table META.
*/
public class MetaDao extends AbstractDao<Meta, Long> {

    public static final String TABLENAME = "META";

    /**
     * Properties of entity Meta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdMeta = new Property(1, Long.class, "IdMeta", false, "ID_META");
        public final static Property Suma = new Property(2, Double.class, "Suma", false, "SUMA");
        public final static Property Fechini = new Property(3, String.class, "Fechini", false, "FECHINI");
        public final static Property Fechafin = new Property(4, String.class, "Fechafin", false, "FECHAFIN");
        public final static Property Meta = new Property(5, Double.class, "Meta", false, "META");
        public final static Property Nombre = new Property(6, String.class, "Nombre", false, "NOMBRE");
    };


    public MetaDao(DaoConfig config) {
        super(config);
    }
    
    public MetaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'META' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_META' INTEGER," + // 1: IdMeta
                "'SUMA' REAL," + // 2: Suma
                "'FECHINI' TEXT," + // 3: Fechini
                "'FECHAFIN' TEXT," + // 4: Fechafin
                "'META' REAL," + // 5: Meta
                "'NOMBRE' TEXT);"); // 6: Nombre
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'META'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Meta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long IdMeta = entity.getIdMeta();
        if (IdMeta != null) {
            stmt.bindLong(2, IdMeta);
        }
 
        Double Suma = entity.getSuma();
        if (Suma != null) {
            stmt.bindDouble(3, Suma);
        }
 
        String Fechini = entity.getFechini();
        if (Fechini != null) {
            stmt.bindString(4, Fechini);
        }
 
        String Fechafin = entity.getFechafin();
        if (Fechafin != null) {
            stmt.bindString(5, Fechafin);
        }
 
        Double Meta = entity.getMeta();
        if (Meta != null) {
            stmt.bindDouble(6, Meta);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(7, Nombre);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Meta readEntity(Cursor cursor, int offset) {
        Meta entity = new Meta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // IdMeta
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // Suma
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Fechini
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Fechafin
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Meta
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Nombre
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Meta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdMeta(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSuma(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setFechini(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFechafin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMeta(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Meta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Meta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
