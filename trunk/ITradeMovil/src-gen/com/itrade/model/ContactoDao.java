package com.itrade.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.itrade.model.Contacto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACTO.
*/
public class ContactoDao extends AbstractDao<Contacto, Long> {

    public static final String TABLENAME = "CONTACTO";

    /**
     * Properties of entity Contacto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPersona = new Property(1, Long.class, "IdPersona", false, "ID_PERSONA");
        public final static Property IdUsuario = new Property(2, Long.class, "IdUsuario", false, "ID_USUARIO");
        public final static Property Nombre = new Property(3, String.class, "Nombre", false, "NOMBRE");
        public final static Property ApePaterno = new Property(4, String.class, "ApePaterno", false, "APE_PATERNO");
        public final static Property ApeMaterno = new Property(5, String.class, "ApeMaterno", false, "APE_MATERNO");
        public final static Property Activo = new Property(6, String.class, "Activo", false, "ACTIVO");
        public final static Property Telefono = new Property(7, String.class, "Telefono", false, "TELEFONO");
        public final static Property Email = new Property(8, String.class, "Email", false, "EMAIL");
    };


    public ContactoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_PERSONA' INTEGER," + // 1: IdPersona
                "'ID_USUARIO' INTEGER," + // 2: IdUsuario
                "'NOMBRE' TEXT," + // 3: Nombre
                "'APE_PATERNO' TEXT," + // 4: ApePaterno
                "'APE_MATERNO' TEXT," + // 5: ApeMaterno
                "'ACTIVO' TEXT," + // 6: Activo
                "'TELEFONO' TEXT," + // 7: Telefono
                "'EMAIL' TEXT);"); // 8: Email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contacto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long IdPersona = entity.getIdPersona();
        if (IdPersona != null) {
            stmt.bindLong(2, IdPersona);
        }
 
        Long IdUsuario = entity.getIdUsuario();
        if (IdUsuario != null) {
            stmt.bindLong(3, IdUsuario);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(4, Nombre);
        }
 
        String ApePaterno = entity.getApePaterno();
        if (ApePaterno != null) {
            stmt.bindString(5, ApePaterno);
        }
 
        String ApeMaterno = entity.getApeMaterno();
        if (ApeMaterno != null) {
            stmt.bindString(6, ApeMaterno);
        }
 
        String Activo = entity.getActivo();
        if (Activo != null) {
            stmt.bindString(7, Activo);
        }
 
        String Telefono = entity.getTelefono();
        if (Telefono != null) {
            stmt.bindString(8, Telefono);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(9, Email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contacto readEntity(Cursor cursor, int offset) {
        Contacto entity = new Contacto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // IdPersona
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // IdUsuario
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Nombre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ApePaterno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ApeMaterno
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Activo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Telefono
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contacto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPersona(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdUsuario(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNombre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApePaterno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApeMaterno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setActivo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelefono(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contacto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contacto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
