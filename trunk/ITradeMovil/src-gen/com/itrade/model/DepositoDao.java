package com.itrade.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.itrade.model.Deposito;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPOSITO.
*/
public class DepositoDao extends AbstractDao<Deposito, Long> {

    public static final String TABLENAME = "DEPOSITO";

    /**
     * Properties of entity Deposito.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdDeposito = new Property(1, Integer.class, "IdDeposito", false, "ID_DEPOSITO");
        public final static Property IdUsuario = new Property(2, Integer.class, "IdUsuario", false, "ID_USUARIO");
        public final static Property Monto = new Property(3, Double.class, "Monto", false, "MONTO");
        public final static Property Fecha = new Property(4, String.class, "Fecha", false, "FECHA");
    };


    public DepositoDao(DaoConfig config) {
        super(config);
    }
    
    public DepositoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPOSITO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_DEPOSITO' INTEGER," + // 1: IdDeposito
                "'ID_USUARIO' INTEGER," + // 2: IdUsuario
                "'MONTO' REAL," + // 3: Monto
                "'FECHA' TEXT);"); // 4: Fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPOSITO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Deposito entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer IdDeposito = entity.getIdDeposito();
        if (IdDeposito != null) {
            stmt.bindLong(2, IdDeposito);
        }
 
        Integer IdUsuario = entity.getIdUsuario();
        if (IdUsuario != null) {
            stmt.bindLong(3, IdUsuario);
        }
 
        Double Monto = entity.getMonto();
        if (Monto != null) {
            stmt.bindDouble(4, Monto);
        }
 
        String Fecha = entity.getFecha();
        if (Fecha != null) {
            stmt.bindString(5, Fecha);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Deposito readEntity(Cursor cursor, int offset) {
        Deposito entity = new Deposito( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // IdDeposito
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // IdUsuario
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Monto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Fecha
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Deposito entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdDeposito(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdUsuario(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMonto(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setFecha(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Deposito entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Deposito entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
